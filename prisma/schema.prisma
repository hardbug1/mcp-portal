// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  passwordHash    String?  @map("password_hash")
  name            String
  avatarUrl       String?  @map("avatar_url")
  oauthProvider   String?  @map("oauth_provider")
  oauthId         String?  @map("oauth_id")
  emailVerified   Boolean  @default(false) @map("email_verified")
  mfaEnabled      Boolean  @default(false) @map("mfa_enabled")
  timezone        String   @default("UTC")
  locale          String   @default("ko")
  refreshToken    String?  @map("refresh_token")
  passwordResetToken String? @map("password_reset_token")
  passwordResetTokenExpiry DateTime? @map("password_reset_token_expiry")
  lastLoginAt     DateTime? @map("last_login_at")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  ownedWorkspaces Workspace[] @relation("WorkspaceOwner")
  workspaceUsers  WorkspaceUser[]
  workflows       Workflow[]
  integrations    Integration[]
  deployments     Deployment[]
  apiKeys         ApiKey[]
  auditLogs       AuditLog[]

  @@map("users")
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  ownerId     String   @map("owner_id")
  planType    String   @map("plan_type") @default("free")
  planLimits  Json     @map("plan_limits")
  settings    Json     @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  owner          User            @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  workspaceUsers WorkspaceUser[]
  workflows      Workflow[]
  integrations   Integration[]
  apiKeys        ApiKey[]
  auditLogs      AuditLog[]

  @@map("workspaces")
}

model WorkspaceUser {
  workspaceId String   @map("workspace_id")
  userId      String   @map("user_id")
  role        String   @default("member")
  permissions Json     @default("{}")
  invitedBy   String?  @map("invited_by")
  invitedAt   DateTime? @map("invited_at")
  joinedAt    DateTime? @map("joined_at")

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([workspaceId, userId])
  @@map("workspace_users")
}

model Workflow {
  id                   String   @id @default(cuid())
  workspaceId          String   @map("workspace_id")
  name                 String
  description          String?
  tags                 String[]
  definition           Json
  status               String   @default("draft")
  version              Int      @default(1)
  totalExecutions      Int      @default(0) @map("total_executions")
  successfulExecutions Int      @default(0) @map("successful_executions")
  lastExecutedAt       DateTime? @map("last_executed_at")
  createdBy            String   @map("created_by")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Relations
  workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  creator     User         @relation(fields: [createdBy], references: [id])
  deployments Deployment[]
  executions  Execution[]

  @@map("workflows")
}

model Integration {
  id           String    @id @default(cuid())
  workspaceId  String    @map("workspace_id")
  serviceName  String    @map("service_name")
  serviceType  String    @map("service_type")
  credentials  Json      // Encrypted
  scopes       String[]
  status       String    @default("active")
  lastTestedAt DateTime? @map("last_tested_at")
  testResult   Json?     @map("test_result")
  createdBy    String    @map("created_by")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  creator   User      @relation(fields: [createdBy], references: [id])

  @@map("integrations")
}

model Deployment {
  id                  String    @id @default(cuid())
  workflowId          String    @map("workflow_id")
  environment         String    @default("production")
  mcpServerUrl        String?   @map("mcp_server_url")
  status              String    @default("pending")
  config              Json      @default("{}")
  deployedAt          DateTime? @map("deployed_at")
  healthCheckUrl      String?   @map("health_check_url")
  lastHealthCheck     DateTime? @map("last_health_check")
  healthStatus        String?   @map("health_status")
  workflowVersion     Int       @map("workflow_version")
  deploymentVersion   String    @map("deployment_version")
  createdBy           String    @map("created_by")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  // Relations
  workflow   Workflow    @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  creator    User        @relation(fields: [createdBy], references: [id])
  executions Execution[]

  @@map("deployments")
}

model Execution {
  id            String    @id @default(cuid())
  workflowId    String    @map("workflow_id")
  deploymentId  String?   @map("deployment_id")
  status        String    @default("pending")
  triggerType   String    @map("trigger_type")
  triggerData   Json?     @map("trigger_data")
  inputData     Json?     @map("input_data")
  outputData    Json?     @map("output_data")
  errorMessage  String?   @map("error_message")
  errorStack    String?   @map("error_stack")
  durationMs    Int?      @map("duration_ms")
  memoryUsageMb Int?      @map("memory_usage_mb")
  startedAt     DateTime? @map("started_at")
  completedAt   DateTime? @map("completed_at")

  // Relations
  workflow   Workflow       @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  deployment Deployment?    @relation(fields: [deploymentId], references: [id])
  logs       ExecutionLog[]

  @@map("executions")
}

model ExecutionLog {
  id          String   @id @default(cuid())
  executionId String   @map("execution_id")
  nodeId      String?  @map("node_id")
  level       String   @default("info")
  message     String
  metadata    Json?
  timestamp   DateTime @default(now())

  // Relations
  execution Execution @relation(fields: [executionId], references: [id], onDelete: Cascade)

  @@map("execution_logs")
}

model ApiKey {
  id          String    @id @default(cuid())
  workspaceId String    @map("workspace_id")
  name        String
  keyHash     String    @unique @map("key_hash")
  keyPrefix   String    @map("key_prefix")
  scopes      String[]
  rateLimit   Int       @default(1000) @map("rate_limit")
  status      String    @default("active")
  lastUsedAt  DateTime? @map("last_used_at")
  expiresAt   DateTime? @map("expires_at")
  createdBy   String    @map("created_by")
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  creator   User      @relation(fields: [createdBy], references: [id])

  @@map("api_keys")
}

model AuditLog {
  id           String   @id @default(cuid())
  workspaceId  String?  @map("workspace_id")
  userId       String?  @map("user_id")
  action       String
  resourceType String   @map("resource_type")
  resourceId   String?  @map("resource_id")
  details      Json?
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  timestamp    DateTime @default(now())

  // Relations
  workspace Workspace? @relation(fields: [workspaceId], references: [id])
  user      User?      @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}
