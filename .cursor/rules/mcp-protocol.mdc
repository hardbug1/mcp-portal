---
description:
globs:
alwaysApply: false
---
# MCP 프로토콜 가이드

## MCP (Model Context Protocol) 개요
이 프로젝트의 핵심은 MCP 서버를 생성하는 노코드 플랫폼입니다.

## MCP 프로토콜 요구사항
MCP 프로토콜 1.0+ 사양을 엄격히 준수해야 합니다:

### 필수 메시지 타입
- `initialize`: 서버 초기화
- `tools/list`: 도구 목록 조회
- `tools/call`: 도구 실행

### 지원 전송 방식
- Server-Sent Events (SSE)
- HTTP 스트리밍

### 메시지 형식 예시
```typescript
interface MCPToolResponse {
  content: Array<{
    type: "text" | "image" | "resource";
    text?: string;
    data?: string;
    mimeType?: string;
  }>;
  isError?: boolean;
}
```

## 워크플로우 → MCP 서버 변환
사용자가 시각적 워크플로우 빌더에서 만든 워크플로우를 MCP 서버로 변환하는 것이 핵심 기능입니다.

### 워크플로우 구조
- **노드**: 개별 작업 단위 (API 호출, 데이터 변환 등)
- **연결**: 노드 간 데이터 흐름
- **트리거**: 워크플로우 시작점
- **액션**: 실제 작업 수행

### MCP 도구 생성
각 워크플로우는 하나 이상의 MCP 도구로 변환됩니다:

```typescript
interface MCPTool {
  name: string;
  description: string;
  inputSchema: {
    type: "object";
    properties: Record<string, any>;
    required: string[];
  };
}
```

## 통합 서비스
다양한 외부 서비스와의 통합을 지원:
- **Google Workspace** (Gmail, Drive, Sheets)
- **GitHub** (리포지토리, 이슈, PR)
- **Slack** (메시지, 채널)
- **Notion** (페이지, 데이터베이스)
- **Zapier** 스타일 통합

## 배포 및 실행
생성된 MCP 서버는:
- Docker 컨테이너로 패키징
- Kubernetes에 배포
- 헬스체크 및 모니터링
- 자동 스케일링 지원

## 다음 구현 단계
1. **워크플로우 정의 스키마** 설계
2. **노드 타입 시스템** 구현
3. **MCP 서버 생성 엔진** 개발
4. **실시간 실행 엔진** 구현

## 참고 문서
- [docs/system-design.md](mdc:docs/system-design.md): 전체 시스템 아키텍처
- [docs/api-design.md](mdc:docs/api-design.md): API 명세서
